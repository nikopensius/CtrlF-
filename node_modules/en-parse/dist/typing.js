"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./rules/types");
function default_1(nodes) {
    nodes = singleTyping(nodes);
    nodes = multipleTyping(nodes);
    return nodes;
}
exports.default = default_1;
;
function singleTyping(nodes) {
    for (var index = 0; index < nodes.length; index++) {
        let newType = types_1.single[nodes[index].type];
        if (newType)
            nodes[index].type = newType;
    }
    return nodes;
}
function multipleTyping(nodes) {
    let nodesTypes = nodes.map(x => "#" + x.type).join("-") + "-";
    for (var index = 0; index < types_1.multiple.length; index++) {
        var rule = types_1.multiple[index];
        let result;
        while (result = rule.regex.exec(nodesTypes)) {
            let match = result[0];
            let startingIndex = result.index;
            let mostLeftIndex = getMostLeftIndex(nodesTypes, startingIndex);
            let mostRightIndex = getMostRightIndex(mostLeftIndex, match);
            let count = mostRightIndex - mostLeftIndex + 1;
            nodes[mostLeftIndex].type = rule.type;
            const dyingNodes = [];
            for (let index = 0; index < nodes.length; index++) {
                let node = nodes[index];
                if (index <= mostRightIndex && index > mostLeftIndex)
                    dyingNodes.push({ index, node });
            }
            for (var index = 0; index < dyingNodes.length; index++) {
                var dyingNode = dyingNodes[index];
                nodes[mostLeftIndex].index[1] = dyingNode.node.index[1];
                nodes[mostLeftIndex].tags = nodes[mostLeftIndex].tags.concat(dyingNode.node.tags);
                nodes[mostLeftIndex].tokens = nodes[mostLeftIndex].tokens.concat(dyingNode.node.tokens);
            }
            if (dyingNodes.length)
                nodes.splice(dyingNodes[0].index, dyingNodes.length);
            nodesTypes = nodes.map(x => "#" + x.type).join("-") + "-";
        }
    }
    return nodes;
}
function getMostLeftIndex(original, startingIndex) {
    return original.substr(0, startingIndex).split("-").length - 1;
}
function getMostRightIndex(mostLeftIndex, match) {
    return mostLeftIndex + match.split("-").length - 2;
}
