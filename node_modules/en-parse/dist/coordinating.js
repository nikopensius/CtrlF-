"use strict";
const coordinators = ["CC", ","];
exports.split = function (nodes) {
    let subSentences = [];
    let current = 0;
    for (var i = 0; i < nodes.length; i++) {
        let node = nodes[i];
        if (~coordinators.indexOf(node.tags[0])) {
            incCurrent();
            subSentences[current].push(node);
            incCurrent();
        }
        else {
            ensureArr();
            subSentences[current].push(node);
        }
    }
    return { subSentences: subSentences.filter(x => x.length), raw: nodes };
    function incCurrent() {
        current++;
        ensureArr();
    }
    function ensureArr() {
        if (!Array.isArray(subSentences[current]))
            subSentences[current] = [];
    }
};
exports.join = function (parseResult) {
    for (var i = 0; i < parseResult.subSentences.length; i++) {
        let sm2 = parseResult.subSentences[i - 2];
        let sm1 = parseResult.subSentences[i - 1];
        let s0 = parseResult.subSentences[i];
        let sp1 = parseResult.subSentences[i + 1];
        let sp2 = parseResult.subSentences[i + 2];
        let sp3 = parseResult.subSentences[i + 3];
        let sm2Tg = sm2 ? sm2[0].tags[0] : undefined;
        let sm2Lb = sm2 ? sm2[0].label : undefined;
        let sm2Tp = sm2 ? sm2[0].type : undefined;
        let sm2Lf = sm2 ? sm2[0].left : undefined;
        let sm2Rt = sm2 ? sm2[0].right : undefined;
        let sm2Ll = sm2Lf ? sm2Lf.length : undefined;
        let sm2Rl = sm2Rt ? sm2Rt.length : undefined;
        let sm1Tg = sm1 ? sm1[0].tags[0] : undefined;
        let sm1Lb = sm1 ? sm1[0].label : undefined;
        let sm1Tp = sm1 ? sm1[0].type : undefined;
        let sm1Lf = sm1 ? sm1[0].left : undefined;
        let sm1Rt = sm1 ? sm1[0].right : undefined;
        let sm1Ll = sm1Lf ? sm1Lf.length : undefined;
        let sm1Rl = sm1Rt ? sm1Rt.length : undefined;
        let s0Tg = s0 ? s0[0].tags[0] : undefined;
        let s0Lb = s0 ? s0[0].label : undefined;
        let s0Tp = s0 ? s0[0].type : undefined;
        let s0Lf = s0 ? s0[0].left : undefined;
        let s0Rt = s0 ? s0[0].right : undefined;
        let s0Ll = s0Lf ? s0Lf.length : undefined;
        let s0Rl = s0Rt ? s0Rt.length : undefined;
        let sp1Tg = sp1 ? sp1[0].tags[0] : undefined;
        let sp1Lb = sp1 ? sp1[0].label : undefined;
        let sp1Tp = sp1 ? sp1[0].type : undefined;
        let sp1Lf = sp1 ? sp1[0].left : undefined;
        let sp1Rt = sp1 ? sp1[0].right : undefined;
        let sp1Ll = sp1Lf ? sp1Lf.length : undefined;
        let sp1Rl = sp1Rt ? sp1Rt.length : undefined;
        let sp2Tg = sp2 ? sp2[0].tags[0] : undefined;
        let sp2Lb = sp2 ? sp2[0].label : undefined;
        let sp2Tp = sp2 ? sp2[0].type : undefined;
        let sp2Lf = sp2 ? sp2[0].left : undefined;
        let sp2Rt = sp2 ? sp2[0].right : undefined;
        let sp2Ll = sp2Lf ? sp2Lf.length : undefined;
        let sp2Rl = sp2Rt ? sp2Rt.length : undefined;
        let sp3Tg = sp3 ? sp3[0].tags[0] : undefined;
        let sp3Lb = sp3 ? sp3[0].label : undefined;
        let sp3Tp = sp3 ? sp3[0].type : undefined;
        let sp3Lf = sp3 ? sp3[0].left : undefined;
        let sp3Rt = sp3 ? sp3[0].right : undefined;
        let sp3Ll = sp3Lf ? sp3Lf.length : undefined;
        let sp3Rl = sp3Rt ? sp3Rt.length : undefined;
        if (!((sp2 && sp1) || (sp2 && s0) || (s0 && sp1)))
            continue;
        if (s0 && sp1 && sm1) {
            if (sm2 && sm1 && s0 && sp1 && sp1 && sp2) {
                if (sm1Tg === "," && sp1Tg === ",") {
                    if (s0Ll === 0 && s0Rl === 0 && (s0Tp === "NP" || s0Tg === "VBG") && sm2Tp === "NP" && isVerbal(sp2Tp)) {
                        sm2[0].label = "APPOS";
                        s0[0].label = "NSUBJ";
                        s0[0].left.unshift(sm2[0]);
                        parseResult.subSentences[i + 2][0].left.unshift(sm1[0]);
                        parseResult.subSentences[i + 2][0].left.unshift(s0[0]);
                        parseResult.subSentences[i + 2][0].left.unshift(sp1[0]);
                        parseResult.subSentences.splice(i - 2, 4);
                    }
                    if (s0Tp === "NP" && s0Lf[0] && s0Lf[0].label === "CASE" && sm2Tp === "NP" && isVerbal(sp2Tp)) {
                        console.log("SUBJECT & AMOD");
                        parseResult.subSentences.splice(i - 2, 4);
                        continue;
                    }
                    if (s0Lf.some(x => !!~["WP", "WRB", "WDT"].indexOf(x.type)) && sm2Tp === "NP" && isVerbal(sp2Tp)) {
                        console.log("ACL and SUBJECT");
                        parseResult.subSentences.splice(i - 2, 4);
                        continue;
                    }
                }
            }
            if (sm1 && s0 && sp1) {
                if (s0Tg === "," && (!sm1Ll) && (!sm1Rl) && isVerbal(sp1Tp)) {
                    if (((!(sm1[0].index[0] - sm1[0].index[1])) && sm1Tg === "DT") ||
                        ((!(sm1[0].index[0] - sm1[0].index[1])) && sm1Tg === "UH") ||
                        ((!(sm1[0].index[0] - sm1[0].index[1])) && sm1Tg === "RB")) {
                        console.log("Interjection");
                        parseResult.subSentences.splice(i - 1, 2);
                    }
                }
            }
            if (s0Tg === "," && isVerbal(sp1Tp) && sm1Lf.some(x => x.label === "ADVMARK" || x.label === "ADVMOD" || x.label === "COMPMARK")) {
                sm1[0].label = "ADVCL";
                parseResult.subSentences[i + 1][0].left.unshift(s0[0]);
                parseResult.subSentences[i + 1][0].left.unshift(sm1[0]);
                parseResult.subSentences.splice(i - 1, 2);
                continue;
            }
            if (s0Tg === "," && isVerbal(sp1Tp) && (sm1Ll === 0 && sm1Rl === 0 && sm1[0].tags.length === 1 && ~["WRB", "WP", "UH"].indexOf(sm1Tg))) {
                sm1[0].label = "INTERJ";
                parseResult.subSentences[i + 1][0].left.unshift(s0[0]);
                parseResult.subSentences[i + 1][0].left.unshift(sm1[0]);
                parseResult.subSentences.splice(i - 1, 2);
                continue;
            }
            if (s0Tg === "," && isVerbal(sp1Tp) && sm1Tp === "NP" && sm1Lf[0] && sm1Lf[0].label === "CASE") {
                s0[0].label = "AMOD";
                parseResult.subSentences[i + 1][0].left.unshift(s0[0]);
                sm1[0].label = "PUNC";
                parseResult.subSentences[i + 1][0].left.unshift(sm1[0]);
                parseResult.subSentences.splice(i - 1, 2);
                continue;
            }
            if (s0Tg === "CC" && isVerbal(sm1Tp) && isVerbal(sp1Tp)) {
                console.log("CONJ");
                parseResult.subSentences.splice(i - 1, 2);
                continue;
            }
            if (s0Tg === "CC" && sm1Tg === "," && isVerbal(sp1Tp) && isVerbal(sm2Tp)) {
                console.log("CONJ (but with an extra,)");
                parseResult.subSentences.splice(i - 2, 3);
                continue;
            }
            if (sm1Tp === "NP" && s0Tg === "," && isVerbal(sp1Tp) && sp1Lf.some(x => x.label.startsWith("NSUBJ"))) {
                if (sm1Tg.startsWith("N")) {
                    parseResult.subSentences.splice(i - 1, 2);
                    console.log("Prov");
                }
                else {
                    parseResult.subSentences.splice(i - 1, 2);
                    console.log("AMOD");
                }
            }
            if (s0Tg === "," && sp1Tp === "NP" && sm1Tp === "NP" && (!(sm1Ll || sm1Rl)) && (!(sp1Ll || sp1Rl))) {
                console.log("CC");
                if (sp3 && sp2) {
                    if (sp2Tg === "," && sp3Tg === "CC") {
                        console.log("CC subject found");
                        parseResult.subSentences.splice(i - 1, 4);
                    }
                }
                else
                    parseResult.subSentences.splice(i - 1, 2);
                continue;
            }
        }
        if (s0 && sp1 && sp2) {
            if (s0Tg === "VBG" && s0Rl && sp1Tg === "," && (sp2Tp === "VP" || sp2Tp === "VB" || sp2Tp === "VBN")) {
                if ((sm1 && sm2) && sm2Tp === "NP" && sm1Tp === "PUNCT") {
                    sm2[0].label = "NSUBJ";
                    s0[0].label = "ADVCL";
                    s0[0].left.unshift(sm2[0]);
                    parseResult.subSentences[i + 2][0].left.unshift(sm1[0]);
                    parseResult.subSentences[i + 2][0].left.unshift(s0[0]);
                    parseResult.subSentences[i + 2][0].left.unshift(sp1[0]);
                    parseResult.subSentences.splice(i - 2, 4);
                }
                else {
                    console.log(s0, sp1, sp2);
                    console.log("Clausal do it");
                    parseResult.subSentences.splice(i, 2);
                }
            }
        }
    }
    console.log(JSON.stringify(parseResult.subSentences.map(x => x[0].tokens)));
    console.log(JSON.stringify(parseResult.subSentences));
    return parseResult.subSentences[0];
};
function isVerbal(t) {
    return ~["VP", "VB", "VBN"].indexOf(t);
}
