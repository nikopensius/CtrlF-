"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const escape_regex_1 = require("./escape_regex");
const wrappers_1 = require("./wrappers");
const openingWrappers = wrappers_1.default.map(x => escape_regex_1.default(x.a));
const closingWrappers = wrappers_1.default.map(x => escape_regex_1.default(x.z));
const midPunctuation = [",", ":", ";", "â€¦", "-"].map(x => escape_regex_1.default(x));
const endPunctuation = [".", "!", "?"].map(x => escape_regex_1.default(x));
const regularExpressions = [
    {
        reg: new RegExp(`(\\s|^)((${openingWrappers.join("|")})+)(.)`, "gim"),
        rep: "$1 $2 $4"
    },
    {
        reg: new RegExp(`(.)((${closingWrappers.join("|")})+)((${midPunctuation.concat(endPunctuation).join("|")})|\\s|$)`, "gim"),
        rep: "$1 $2 $4"
    },
    {
        reg: new RegExp(`(${closingWrappers.join("|")})(?=(${closingWrappers.join("|")}))`, "gim"),
        rep: " $1 "
    },
    {
        reg: new RegExp(`(^|.)((${midPunctuation.join("|")})+)(\\s|$)`, "gim"),
        rep: "$1 $2 $4"
    },
    {
        reg: new RegExp(`(^|.)((${endPunctuation.join("|")}))$`, "gim"),
        rep: "$1 $2"
    },
    {
        reg: new RegExp(`(^|.)((${endPunctuation.join("|")}))(\\s)(${closingWrappers.join("|")})`, "gim"),
        rep: "$1 $2 $4 $5"
    },
    {
        reg: /(.)('s|'ll|'m|'re|'ve|'d|'clock)(\s|$)/gim,
        rep: "$1 $2 $3"
    },
    {
        reg: /(do|does|did|ca|could|sha|should|are|were|wo|would|have|had|has|is|was|might|ai|need)(n't)(\s|$)/gim,
        rep: "$1 $2 $3"
    },
    {
        reg: /(do|does|did|ca|could|sha|should|are|were|wo|would|have|had|has|is|was|might|ai|need)(n't)(\s|$)/gim,
        rep: "$1 $2 $3"
    },
    {
        reg: /([a-z])(')(\d)/gim,
        rep: "$1 $2$3"
    },
    {
        reg: /(\d)([$%@#&\*+=^])(\s|$)/gim,
        rep: "$1 $2 $3"
    },
    {
        reg: /(\s|^)([$%@#&\*+=^])(\d)/gim,
        rep: "$1 $2 $3"
    },
    {
        reg: /\s+/gim,
        rep: " "
    },
    {
        reg: /^ | $/gim,
        rep: ""
    }
];
function tokenize(value) {
    for (var index = 0; index < regularExpressions.length; index++) {
        const rule = regularExpressions[index];
        value = value.replace(rule.reg, rule.rep);
    }
    return value.split(" ");
}
exports.default = tokenize;
